version: 2.1

executors:
  default_php_exec:
    docker:
      - image: circleci/php:7.3-node-browsers
    working_directory: ~/code
    environment:
      ENV: ci

jobs:
  build:
    executor: default_php_exec
    steps:
      - checkout
      - run:
          name: Install PHP libzip-dev
          command: sudo apt install -y zlib1g-dev
      - run:
          name: Install zip package for PHP
          command: sudo docker-php-ext-install zip

      - run:
          name: Update composer to latest version
          command: sudo composer self-update

      - restore_cache:
          keys:
            - composer-v1-{{ checksum "src/composer.lock" }}
            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
            - composer-v1-
      - run:
          name: Install Composer packages
          command: cd src && composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "src/composer.lock" }}
          paths:
            - src/vendor

      - restore_cache:
          keys:
            - node-v1-{{ checksum "src/package.json" }}
            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
            - node-v1-
      - run:
          name: Install NodeJS packages
          command: cd src && yarn install
      - save_cache:
          key: node-v1-{{ checksum "src/package.json" }}
          paths:
            - src/node_modules

#      - run:
#          name: Migrate Laravel Database
#          command: php artisan migrate --env=testing --force

#      - run:
#          name: Compile Javascript & CSS for Browser Testing
#          command: npm run production
#
#      - run:
#          name: Start Chrome Driver
#          command: ./vendor/laravel/dusk/bin/chromedriver-linux
#          background: true
#
#      - run:
#          name: Run Laravel Server
#          command: php artisan serve
#          background: true

      - run:
          name: Test 1 - Run Phpunit for Server-Side HTTP Requests & PHP Unit Testing
          command: cd src && phpdbg -qrr vendor/bin/phpunit --coverage-html build/coverage-report
      - store_artifacts:
          path:  build/coverage-report

#      - run: ./vendor/bin/codecept build
#      - run: ./vendor/bin/codecept run --xml result.xml
#      - store_test_results:
#          path: tests/_output
#      - store_artifacts:
#          path: tests/_output

workflows:
  build:
    jobs:
      - build
